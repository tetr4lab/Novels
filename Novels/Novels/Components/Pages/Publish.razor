@inherits ItemListBase<Book>

@page "/book/{BookId:long?}"

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Book</PageTitle>
<NavigationLock OnBeforeInternalNavigation="OnLocationChangingAsync" />

@if (DataSet.IsUnavailable) {
    <MudAlert Severity="Severity.Error" Elevation="3">Unable to connect to any of the specified database management hosts.</MudAlert>
} else if (DataSet.IsReady && Book is null) {
    <MudText>No book selected or found.</MudText>
    <MudButton Class="ma-3" OnClick="@(() => NavigationManager.NavigateTo ($"{NavigationManager.BaseUri}"))" StartIcon="@Icons.Material.Filled.LibraryBooks" Variant="Variant.Filled">go home</MudButton>
} else if (!DataSet.IsReady || items is null || Book is null) {
    <MudProgressCircular Indeterminate="true" />
} else if (items.Count > 0) {
    <MudSimpleTable Elevation="0" Dense Striped Bordered>
        <thead>
            <tr>
                <th style="width: 10em;"></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@(Book.Label[nameof(Book.Id)])</td>
                <td>
                    <MudStack Row Spacing="1" Class="align-center">
                        <MudText Typo="Typo.inherit">@Book.Id</MudText>
                        <MudSpacer />
                        @if (Book.PublishedAt is not null) {
                            <MudChip T="string" Variant="Variant.Outlined">@(Book.Label [nameof (Book.PublishedAt)]): @(Book.PublishedAt.Value.ToString ("yyyy/MM/dd HH:mm"))</MudChip>
                        }
                        <MudChip T="string" Variant="Variant.Outlined">@(Book.Label [nameof (Book.LastUpdate)]): @(Book.LastUpdate.ToString ("yyyy/MM/dd HH:mm"))</MudChip>
                        <MudSpacer />
                        <MudText>
                            @if (Book.Released) {
                                <MudTooltip Duration="1000" Text="@(Book.Label [nameof (Book.NumberOfPublished)])">
                                    <MudText Color="@(Book.NumberOfPublished < Book.NumberOfRelatedSheets && Book.NumberOfPublished < Book.NumberOfSheets ? Color.Warning : Color.Inherit)">@(Book.NumberOfPublished)</MudText>
                                </MudTooltip>
                                <span> / </span>
                            }
                            <MudTooltip Duration="1000" Text="@(Book.Label [nameof (Book.NumberOfRelatedSheets)])">
                                <MudText Color="@(Book.NumberOfRelatedSheets < Book.NumberOfSheets ? Color.Warning : Color.Inherit)">@(Book.NumberOfRelatedSheets)</MudText>
                            </MudTooltip>
                            <span> / </span>
                            <MudTooltip Duration="1000" Text="@(Book.Label [nameof (Book.NumberOfSheets)])">@(Book.NumberOfSheets)</MudTooltip>
                        </MudText>
                    </MudStack>
                </td>
            </tr>
            <tr>
                <td>@(Book.Label [nameof (Book.SeriesTitle)])</td>
                <td>@Book.SeriesTitle</td>
            </tr>
            <tr>
                <td>@(Book.Label [nameof (Book.Title)])</td>
                <td>@Book.Title</td>
            </tr>
            <tr>
                <td>@(Book.Label [nameof (Book.Author)])</td>
                <td>@Book.Author</td>
            </tr>
            <tr>
                <td>
                    <MudStack Row Spacing="1" Class="align-center">
                        @(Book.Label [nameof (Book.Url1)])
                        <MudSpacer />
                        <MudIconButton Disabled="@(IsInvalidUri (Book.Url1))" OnClick="@(async () => await OpenUrl (Book.Url1))" Icon="@Icons.Material.Filled.Link" />
                    </MudStack>
                </td>
                <td><MudTextField T="string" @bind-Value="Book.Url1" /></td>
            </tr>
            <tr>
                <td>
                    <MudStack Row Spacing="1" Class="align-center">
                        @(Book.Label [nameof (Book.Url2)])
                        <MudSpacer />
                        <MudIconButton Disabled="@(IsInvalidUri (Book.Url2))" OnClick="@(async () => await OpenUrl (Book.Url2))" Icon="@Icons.Material.Filled.Link" />
                    </MudStack>
                </td>
                <td><MudTextField T="string" @bind-Value="Book.Url2" /></td>
            </tr>
            <tr>
                <td>@(Book.Label [nameof (Book.LastUpdate)])</td>
                <td>@(Book.LastUpdate.ToString ("yyyy/MM/dd HH:mm"))</td>
            </tr>
            <tr>
                <td>@(Book.Label [nameof (Book.Readed)])</td>
                <td>
                    <MudStack Row Spacing="1" Class="align-center">
                        <MudCheckBox @bind-Value="Book.Readed" />
                        <MudTextField Placeholder="@(Book.Label [nameof (Book.ReadedMemo)])" T="string" @bind-Value="Book.ReadedMemo" />
                    </MudStack>
                </td>
            </tr>
            <tr>
                <td>@(Book.Label [nameof (Book.Wish)])</td>
                <td>
                    <MudCheckBox @bind-Value="Book.Wish"></MudCheckBox>
                </td>
            </tr>
            <tr>
                <td>@(Book.Label [nameof (Book.Errata)])</td>
                <td><MudTextField T="string" Placeholder="@($"error1{Book.Separator}correct1{Book.Terminator}error2{Book.Separator}correct2{Book.Terminator}  :")" @bind-Value="Book.Errata" Lines="10" /></td>
            </tr>
            <tr>
                <td>@(Book.Label [nameof (Book.Remarks)])</td>
                <td><MudTextField T="string" @bind-Value="Book.Remarks" Lines="10" /></td>
            </tr>
            <tr>
                @* 下部ツールバー *@
                <td colspan="2">
                    <MudStack Row Class="justify-center">
                        <MudTooltip Arrow="true" Text="復旧">
                            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.ReplayCircleFilled" Variant="Variant.Outlined" Size="Size.Large" Disabled="IsNotDirty" OnClick="async () => { if (await ConfirmCancelEdit ()) StartEdit (); }" />
                        </MudTooltip>
                        <MudTooltip Arrow="true" Text="保存">
                            <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.Save" Variant="Variant.Outlined" Size="Size.Large" Disabled="IsNotDirty" OnClick="() => { if (editingItem is not null) { Commit (editingItem); StartEdit (); } }" />
                        </MudTooltip>
                    </MudStack>
                </td>
            </tr>
        </tbody>
    </MudSimpleTable>
} else if (Book.IsDirectContent) {
    <MudText>Direct content found.</MudText>
} else {
    <MudText>No items found.</MudText>
}

@code {
    /// <summary>指定された書籍</summary>
    [Parameter] public long? BookId { get; set; } = null;

    /// <inheritdoc/>
    protected override int _initialPageSizeIndex => 1;

    /// <summary>着目中の書籍</summary>
    protected Book? Book { get; set; } = null;

    /// <summary>無効なURI</summary>
    protected bool IsInvalidUri (string? url) => !Uri.IsWellFormedUriString (url, UriKind.Absolute);

    /// <summary>URLを新しいタブで開く</summary>
    protected async Task OpenUrl (string? url) {
        if (!string.IsNullOrEmpty (url)) {
            await JSRuntime.InvokeAsync<object> ("openInNewTab", url);
        }
    }

    /// <summary>編集されていない</summary>
    protected bool IsNotDirty => editingItem is null || backupedItem is null || editingItem.Equals (backupedItem);

    /// <summary>編集開始</summary>
    protected void StartEdit () {
        if (editingItem is null && Book is not null) {
            editingItem = Book;
            backupedItem = Book.Clone ();
        }
    }

    /// <summary>編集内容破棄の確認</summary>
    protected async Task<bool> ConfirmCancelEdit () {
        if (editingItem is not null && !IsNotDirty) {
            var dialogResult = await DialogService.Confirmation ([$"編集内容が破棄されます。",], title: "編集破棄", position: DialogPosition.BottomCenter, acceptionLabel: "破棄", acceptionColor: Color.Error, acceptionIcon: Icons.Material.Filled.Delete);
            if (dialogResult != null && !dialogResult.Canceled && dialogResult.Data is bool ok && ok) {
                Cancel (editingItem);
                Snackbar.Add ("編集内容を削除しました。", Severity.Normal);
            } else {
                return false;
            }
        }
        return true;
    }

    /// <summary>ページ遷移時の処理</summary>
    protected async Task OnLocationChangingAsync (LocationChangingContext context) {
        if (context.IsNavigationIntercepted && !await ConfirmCancelEdit ()) {
            context.PreventNavigation ();
        }
    }

    /// <summary>最初に着目書籍を切り替えてDataSetの再初期化を促す</summary>
    protected override async Task OnInitializedAsync() {
        // Uriパラメータを優先して着目書籍を特定する
        var currentBookId = BookId ?? CurrentBookId;
        if (currentBookId != CurrentBookId) {
            // パラメータによって着目書籍が変更されたら、レイアウトとナビに渡す
            await SetCurrentBookId.InvokeAsync ((currentBookId, CurrentSheetIndex));
        }
        // リロード開始 (CurrentBookIdが変化していなければ何もしない)
        var reload = DataSet.SetCurrentBookIdAsync (currentBookId);
        await base.OnInitializedAsync ();
        // リロード完了待機
        await reload;
        // 着目書籍オブジェクトを取得
        Book = DataSet.Books.Find (s => s.Id == currentBookId);
        await SetSectionTitle.InvokeAsync (Book is null ? "Publish" : $"<span style=\"font-size:80%;\">『{Book?.Title ?? ""}』 {Book?.Author ?? ""}</span>");
        StartEdit ();
    }
}