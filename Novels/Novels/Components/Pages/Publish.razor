@inherits ItemListBase<Sheet>

@page "/book/{BookId:long?}"

@inject NavigationManager NavigationManager

<PageTitle>Book</PageTitle>

@if (DataSet.IsUnavailable) {
    <MudAlert Severity="Severity.Error" Elevation="3">Unable to connect to any of the specified database management hosts.</MudAlert>
} else if (DataSet.IsReady && Book is null) {
    <MudText>No book found.</MudText>
} else if (!DataSet.IsReady || items is null || Book is null) {
    <MudProgressCircular Indeterminate="true" />
} else if (items.Count > 0) {

} else if (Book.IsDirectContent) {
    <MudText>Direct content found.</MudText>
} else {
    <MudText>No items found.</MudText>
}

@code {
    /// <summary>指定された書籍</summary>
    [Parameter] public long? BookId { get; set; } = null;

    /// <inheritdoc/>
    protected override int _initialPageSizeIndex => 1;

    /// <summary>着目中の書籍</summary>
    protected Book? Book { get; set; } = null;

    /// <summary>最初に着目書籍を切り替えてDataSetの再初期化を促す</summary>
    protected override async Task OnInitializedAsync() {
        // Uriパラメータを優先して着目書籍を特定する
        var currentBookId = BookId ?? CurrentBookId;
        if (currentBookId != CurrentBookId) {
            // パラメータによって着目書籍が変更されたら、レイアウトとナビに渡す
            await SetCurrentBookId.InvokeAsync ((currentBookId, CurrentSheetIndex));
        }
        var reload = DataSet.SetCurrentBookIdAsync (currentBookId);
        await base.OnInitializedAsync ();
        // リロード完了待機
        await reload;
        // 着目書籍オブジェクトを取得
        Book = DataSet.Books.Find (s => s.Id == currentBookId);
        await SetSectionTitle.InvokeAsync ($"<span style=\"font-size:80%;\">『{Book?.Title ?? ""}』 {Book?.Author ?? ""}</span>");
    }
}