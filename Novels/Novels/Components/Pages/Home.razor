@inherits ItemListBase<Book>

@page "/"

@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Novels Home</PageTitle>

@if (DataSet.IsUnavailable) {
    <MudAlert Severity="Severity.Error" Elevation="3">Unable to connect to any of the specified database management hosts.</MudAlert>
} else if (!DataSet.IsReady || items is null) {
    <MudProgressCircular Indeterminate="true" />
} else if (items.Count > 0) {
    <style>
        th.mud-table-cell, td.mud-table-cell {
            padding-inline: 0.1em !important;
        }
    </style>
    <MudTable Items="items" Dense Breakpoint="Breakpoint.Xs" @ref="_table"
    Filter="new Func<Book, bool> (FilterFunc)"
    SortLabel="⇅"
    AllowUnsorted="true"
    @bind-SelectedItem="selectedItem"
    @bind-CurrentPage="CurrentPage"
    FooterClass="mud-background-gray"
    Hover="true"
    OnRowClick="EventCallback.Factory.Create<TableRowClickEventArgs<Book>> (this, OnRowClick)"
    Striped="true"
    ReadOnly="false">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.Id)">@(Book.Label [nameof (Book.Id)])</MudTableSortLabel></MudTh>
            <MudTh Class="align-middle text-nowrap">
                <MudTooltip Text="クリックで絞り込み" Duration="1000">
                    <MudLink OnClick="@(async () => await SetFilterText.InvokeAsync (FilterText == "_is_released_" ? "_not_released_" : FilterText == "_not_released_" ? "" : "_is_released_"))" Color="Color.Default" Typo="Typo.inherit" Underline="Underline.None">@(Book.Label [nameof (Book.Released)])</MudLink>
                    <MudLink OnClick="@(async () => await SetFilterText.InvokeAsync (FilterText == "_is_readed_" ? "_not_readed_" : FilterText == "_not_readed_" ? "" : "_is_readed_"))" Color="Color.Default" Typo="Typo.inherit" Underline="Underline.None">@(Book.Label [nameof (Book.Readed)])</MudLink>
                    <MudLink OnClick="@(async () => await SetFilterText.InvokeAsync (FilterText == "_is_wished_" ? "_not_wished_" : FilterText == "_not_wished_" ? "" : "_is_wished_"))" Color="Color.Default" Typo="Typo.inherit" Underline="Underline.None">@(Book.Label [nameof (Book.Wish)])</MudLink>
                </MudTooltip>
            </MudTh>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<Book, string?>(x=>x.Title)">
                    <MudStack Row Spacing="0" Class="align-center">
                        <MudIcon Icon="" />
                        <MudIcon Icon="" />
                        <MudText Typo="Typo.inherit">@(Book.Label [nameof (Book.Title)])</MudText>
                    </MudStack>
                </MudTableSortLabel>
            </MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Book, string?>(x=>x.Author)">@(Book.Label [nameof (Book.Author)])</MudTableSortLabel></MudTh>
            <MudTh Class="align-middle text-nowrap"><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.Site)">@(Book.Label [nameof (Book.Site)])</MudTableSortLabel></MudTh>
            <MudTh Class="align-middle text-nowrap"><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.StatusPriority)">@(Book.Label [nameof (Book.Status)])</MudTableSortLabel></MudTh>
            <MudTh Class="align-middle text-nowrap"><MudTableSortLabel SortBy="new Func<Book, object>(x=>x.NumberOfSheets)">@(Book.Label [nameof (Book.NumberOfSheets)])</MudTableSortLabel></MudTh>
            <MudTh>@(Book.Label [nameof (Book.Remarks)])</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@(Book.Label[nameof(Book.Id)])" Class="align-right text-nowrap">
                <MudStack Row Spacing="0" Class="align-center">
                    @if (context.Id == CurrentBookId) {
                        <MudTooltip Text="@($"着目中の{Book.TableLabel}")" Arrow Duration="1000">
                            <MudIcon Icon="@Icons.Material.Filled.DoubleArrow" />
                        </MudTooltip>
                    }
                    <MudSpacer />
                    @(context.Id)
                </MudStack>
            </MudTd>
            <MudTd DataLabel="@($"{Book.Label[nameof(Book.Released)]} {Book.Label[nameof(Book.Readed)]} {Book.Label[nameof(Book.Wish)]}")" Class="align-middle text-nowrap">
                <MudIcon Icon="@(context.Released ? Icons.Material.Outlined.CheckBox : Icons.Material.Outlined.CheckBoxOutlineBlank)" />
                <MudIcon Icon="@(context.Readed ? Icons.Material.Outlined.CheckBox : Icons.Material.Outlined.CheckBoxOutlineBlank)" />
                <MudIcon Icon="@(context.Wish ? Icons.Material.Outlined.CheckBox : Icons.Material.Outlined.CheckBoxOutlineBlank)" />
            </MudTd>
            <MudTd DataLabel="@(Book.Label[nameof(Book.Title)])">
                <MudStack Row Spacing="0" Class="align-center">
                    <MudIconButton OnClick="@(() => PublishBook (context.Id))" Icon="@(context.IsEmpty ? Icons.Material.Filled.Download : Icons.Material.Filled.Publish)" Size="Size.Small" />
                    <MudIconButton OnClick="@(() => OpenBook (context.Id))" Icon="@Icons.Material.Filled.ViewHeadline" Size="Size.Small" />
                    <MudText Typo="Typo.inherit">@(context.Title)</MudText>
                </MudStack>
            </MudTd>
            <MudTd DataLabel="@(Book.Label[nameof(Book.Author)])">
                @{ var author = context.Author.Replace (' ', '\u2423'); }
                <MudTooltip Arrow Duration="1000">
                    <ChildContent>
                        <MudLink OnClick="@(async () => { await SetFilterText.InvokeAsync (author); await ChangeCurrentBookAsync (context); })" Color="Color.Default" Typo="Typo.inherit" Underline="Underline.None">@(context.Author)</MudLink>
                    </ChildContent>
                    <TooltipContent>
                        <MudStack Spacing="0" Class="align-start">
                            <MudText Typo="Typo.inherit">「@(author)」で絞り込み</MudText>
                            @foreach (var book in items) {
                                if (book.Author == context.Author) {
                                    <MudText Typo="Typo.inherit">『@(book.Title)』</MudText>
                                }
                            }
                        </MudStack>
                    </TooltipContent>
                </MudTooltip>
            </MudTd>
            <MudTd DataLabel="@(Book.Label[nameof(Book.Site)])" Class="align-middle text-nowrap">
                <MudTooltip Text="@($"{Book.Label[nameof(Book.Site)]}を開く")" Arrow Duration="1000">
                    <MudLink OnClick="@(async () => { await JSRuntime.OpenUrl (context.Url); await ChangeCurrentBookAsync (context); })" Target="_blank" Color="Color.Default" Typo="Typo.inherit" Underline="Underline.None">@(context.Site)</MudLink>
                </MudTooltip>
            </MudTd>
            <MudTd DataLabel="@(Book.Label[nameof(Book.Status)])" Class="align-middle text-nowrap">
                <MudChip T="string" Label="true" Size="Size.Small" Variant="Variant.Outlined" Color="@(context.StatusBgColor)" Style="width: 6em">@(context.Status.ToJString ())</MudChip>
            </MudTd>
            <MudTd DataLabel="@(Book.Label[nameof(Book.NumberOfSheets)])" Class="align-middle text-nowrap">
                @if (context.IsDirectContent) {
                    <MudText Typo="Typo.inherit">1/1</MudText>
                } else {
                    <MudTooltip Arrow Duration="1000">
                        <ChildContent>
                            <MudStack Row Spacing="0">
                                <MudText Typo="Typo.inherit" Color="@(
                                            (context.NumberOfPublished ?? 0) > context.NumberOfRelatedSheets || context.NumberOfRelatedSheets > (context.NumberOfSheets) ? Color.Error :
                                            (context.NumberOfPublished ?? 0) < context.NumberOfRelatedSheets || context.NumberOfRelatedSheets < (context.NumberOfSheets) ? Color.Warning : Color.Inherit
                                        )">
                                    @(context.NumberOfRelatedSheets)
                                </MudText>
                                <MudText Typo="Typo.inherit">
                                    /@(context.NumberOfSheets)
                                </MudText>
                            </MudStack>
                        </ChildContent>
                        <TooltipContent>
                            <MudStack Spacing="0" Class="align-start">
                                <MudText Typo="Typo.inherit">発行数量: @(context.NumberOfPublished ?? 0)</MudText>
                                <MudText Typo="Typo.inherit">取得数量: @(context.NumberOfRelatedSheets)</MudText>
                                <MudText Typo="Typo.inherit">書誌数量: @(context.NumberOfSheets)</MudText>
                                <MudText Typo="Typo.inherit">発行日時: @(context.PublishedAt)</MudText>
                                <MudText Typo="Typo.inherit">更新日時: @(context.LastUpdate)</MudText>
                            </MudStack>
                        </TooltipContent>
                    </MudTooltip>
                }
            </MudTd>
            <MudTd DataLabel="@(Book.Label[nameof(Book.Remarks)])">@context.Remarks</MudTd>
        </RowTemplate>
        <PagerContent>
            @if (AllowPaging) {
                <MudTablePager PageSizeOptions="_pageSizeOptions" InfoFormat="{first_item}-{last_item} / {all_items}" RowsPerPageString="行/頁:" />
            }
        </PagerContent>
    </MudTable>
    <MudToolBar Dense Class="mb-5">
        @*hidden spacer*@
    </MudToolBar>
    <MudAppBar Class="backdrop-blur pb-2" Color="Color.Transparent" Dense Bottom="true" Fixed="true">
        <MudSpacer />
        <MudTooltip Arrow="true" Text="@($"{Book.TableLabel}を追加")">
            <MudFab OnClick="AddBook" StartIcon="@Icons.Material.Outlined.Add" Size="Size.Small" />
        </MudTooltip>
    </MudAppBar>
} else {
    <MudText>No items found.</MudText>
}
<MudOverlay @bind-Visible="IsOverlayed" DarkBackground="true" ZIndex="9999">
    <MudProgressCircular Indeterminate="true" />
</MudOverlay>

@code {
    /// <summary>HttpClient</summary>
    protected HttpClient HttpClient => _httpClient ??= HttpClientFactory.CreateClient ("Novels");
    protected HttpClient? _httpClient = null;

    /// <summary>オーバーレイの表示</summary>
    protected bool IsOverlayed { get; set; } = false;

    /// <inheritdoc/>
    protected override int _initialPageSizeIndex => 1;

    /// <summary>表示ページ</summary>
    protected int CurrentPage { get; set; } = 0;

    /// <summary>行がクリックされた</summary>
    protected async Task OnRowClick (TableRowClickEventArgs<Book> context) {
        if (context.Item is Book book) {
            await ChangeCurrentBookAsync (book);
        }
    }

    /// <summary>書籍を発行</summary>
    protected void PublishBook (long bookId) {
        NavigationManager.NavigateTo ($"{NavigationManager.BaseUri}book/{bookId}");
    }

    /// <summary>書籍を開く</summary>
    protected void OpenBook (long bookId) {
        NavigationManager.NavigateTo ($"{NavigationManager.BaseUri}sheets/{bookId}/{(bookId != CurrentBookId ? 1 : CurrentSheetIndex)}");
    }

    /// <summary>書籍を追加する</summary>
    protected async Task AddBook () {
        var url = "";
        try {
            url = await JSRuntime.InvokeAsync<string> ("getClipboardText");
            // urlを修正する機会を与えるダイアログを表示
            var dialogResult = await (await DialogService.OpenAddItemDialog<Book> (
                message: $"取得先URLを確認して{Book.TableLabel}の追加を完了してください。",
                label: "URL",
                value: url
            )).Result;
            if (dialogResult is not null && !dialogResult.Canceled && dialogResult.Data is string newUrl && !string.IsNullOrEmpty (newUrl)) {
                newUrl = newUrl.Trim ();
                // 既存のURLと比較する
                var existingBook = items?.FirstOrDefault (x => x.Url1 == newUrl || x.Url2 == newUrl);
                if (existingBook is not null) {
                    Snackbar.Add ($"既存の{Book.TableLabel}: 『{existingBook.Title}』", Severity.Warning);
                    await ChangeCurrentBookAsync (existingBook);
                    TurnSelectedItemsPage ();
                    return;
                }
                // オーバーレイ
                IsOverlayed = true;
                StateHasChanged ();
                // 入力されたurlからあたらしいBookに情報を取得、DBへ追加・選択する
                var result = await DataSet.UpdateBookAsync (HttpClient, newUrl, UserIdentifier);
                foreach (var issue in result.Value.issues) {
                    Snackbar.Add (issue, Severity.Error);
                }
                if (result.IsSuccess) {
                    var newBook = result.Value.book;
                    lastCreatedId = newBook.Id;
                    await ChangeCurrentBookAsync (newBook);
                    // Publishページへ移動する
                    PublishBook (newBook.Id);
                } else {
                    Snackbar.Add ($"追加に失敗: {(items is null ? "null, " : "")}{lastCreatedId}\n{newItem}", Severity.Error);
                }
            }
        }
        catch (Exception ex) {
            Snackbar.Add ($"Exception: {ex.Message}", Severity.Error);
        }
        finally {
            IsOverlayed = false;
        }
    }

    /// <summary>絞り込みがなければ、選択されている書籍があるページへ</summary>
    protected void TurnSelectedItemsPage () {
        if (_table is not null && items is not null && string.IsNullOrEmpty (FilterText)) {
            var currentIndex = items.IndexOf (selectedItem);
            var currentPage = currentIndex / _table.RowsPerPage;
            if (currentPage != CurrentPage) {
                CurrentPage = currentPage;
                StateHasChanged ();
            }
        }
    }

    /// <summary>遅延初期化</summary>
    protected override async Task OnAfterRenderAsync (bool firstRender) {
        await base.OnAfterRenderAsync (firstRender);
        if (_inited && !_inited2 && items?.Count > 0) {
            _inited2 = true;
            if (CurrentBookId > 0) {
                // 別ページから遷移 (既存セッション)
                var item = items.FirstOrDefault (x => x.Id == CurrentBookId);
                if (item is not null) {
                    selectedItem = item;
                } else {
                    CurrentBookId = 0;
                }
            }
            if (CurrentBookId <= 0) {
                // 新規セッション または書籍が見つからない場合
                selectedItem = items [0];
                await SetCurrentBookId.InvokeAsync ((selectedItem.Id, CurrentSheetIndex));
            }
            TurnSelectedItemsPage ();
        }
    }
    protected bool _inited2 = false;
}
