@inherits ItemListBase<Book>

@page "/"

<PageTitle>Novels Home</PageTitle>

@if (DataSet.IsUnavailable) {
    <MudAlert Severity="Severity.Error" Elevation="3">Unable to connect to any of the specified database management hosts.</MudAlert>
} else if (!DataSet.IsReady || items is null) {
    <MudProgressCircular Indeterminate="true" />
} else if (items.Count > 0) {
    <MudSimpleTable>
        @foreach (var item in items) {
            @if (FilterFunc (item)) {
                <tr>
                    <td>@item.Id</td>
                    <td>
                        <MudButton Size="Size.Small" Variant="Variant.Text" OnClick="async () => await SetCurrentBookId.InvokeAsync (item.Id)">
                            @(item.Id == CurrentBookId ? ">" : " ")
                        </MudButton>
                    </td>
                    <td>@(item.DetectedTitle != item.Title ? "×" : "◯") @item.Title</td>
                    <td>@(item.DetectedTitle)</td>
                    <td>@item.Author</td>
                    <td>@(item.DetectedSite != @item.Site ? "×" : "◯") @item.Site</td>
                    <td>@item.CountOfSheets</td>
                </tr>
            }
        }
    </MudSimpleTable>
} else {
    <MudText>No items found.</MudText>
}

@code {
    /// <summary>着目中の書籍</summary>
    [CascadingParameter (Name = "CurrentBookId")] protected long CurrentBookId { get; set; } = 0;
    /// <summary>着目中の書籍設定</summary>
    [CascadingParameter (Name = "SetCurrentBookId")] protected EventCallback<long> SetCurrentBookId { get; set; }

    /// <summary>遅延初期化</summary>
    protected override async Task OnAfterRenderAsync (bool firstRender) {
        await base.OnAfterRenderAsync (firstRender);
        if (firstRender && items?.Count > 0) {
            SetCurrentBookId.InvokeAsync (items [0].Id);
        }
    }

}
