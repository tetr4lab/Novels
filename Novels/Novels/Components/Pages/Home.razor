@inherits ItemListBase<Book>

@page "/"

<PageTitle>Novels Home</PageTitle>

@if (DataSet.IsUnavailable) {
    <MudAlert Severity="Severity.Error" Elevation="3">Unable to connect to any of the specified database management hosts.</MudAlert>
} else if (!DataSet.IsReady || items is null) {
    <MudProgressCircular Indeterminate="true" />
} else if (items.Count > 0) {
    <MudTable Items="items" Dense Breakpoint="Breakpoint.Xs" @ref="_table"
    Filter="new Func<Book, bool> (FilterFunc)"
    SortLabel="⇅"
    AllowUnsorted="true"
    @bind-SelectedItem="selectedItem"
    @bind-CurrentPage="CurrentPage"
    FooterClass="mud-background-gray"
    Hover="true"
    OnRowClick="EventCallback.Factory.Create<TableRowClickEventArgs<Book>> (this, OnRowClick)"
    Striped="true"
    ReadOnly="false">
        <HeaderContent>
            <MudTh>@(Book.Label [nameof (Book.Id)])</MudTh>
            <MudTh>
                @(Book.Label [nameof (Book.Released)])
                @(Book.Label [nameof (Book.Readed)])
                @(Book.Label [nameof (Book.Wish)])
            </MudTh>
            <MudTh>@(Book.Label [nameof (Book.Title)])</MudTh>
            <MudTh>@(Book.Label [nameof (Book.Author)])</MudTh>
            <MudTh>@(Book.Label [nameof (Book.Site)])</MudTh>
            <MudTh>@(Book.Label [nameof (Book.Status)])</MudTh>
            <MudTh>@(Book.Label [nameof (Book.NumberOfSheets)])</MudTh>
            <MudTh>@(Book.Label [nameof (Book.Remarks)])</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@(Book.Label[nameof(Book.Id)])" Class="align-right text-nowrap">
                <MudStack Row Spacing="0" Class="align-center">
                    @if (context.Id == CurrentBookId) {
                        <MudIcon Icon="@Icons.Material.Filled.DoubleArrow" />
                    }
                    <MudSpacer />
                    @(context.Id)
                </MudStack>
            </MudTd>
            <MudTd DataLabel="@($"{Book.Label[nameof(Book.Released)]} {Book.Label[nameof(Book.Readed)]} {Book.Label[nameof(Book.Wish)]}")" Class="align-middle text-nowrap">
                <MudIcon Icon="@(context.Released ? Icons.Material.Outlined.CheckBox : Icons.Material.Outlined.CheckBoxOutlineBlank)" />
                <MudIcon Icon="@(context.Readed ? Icons.Material.Outlined.CheckBox : Icons.Material.Outlined.CheckBoxOutlineBlank)" />
                <MudIcon Icon="@(context.Wish ? Icons.Material.Outlined.CheckBox : Icons.Material.Outlined.CheckBoxOutlineBlank)" />
            </MudTd>
            <MudTd DataLabel="@(Book.Label[nameof(Book.Title)])">@(context.Title)</MudTd>
            <MudTd DataLabel="@(Book.Label[nameof(Book.Author)])">@(context.Author)</MudTd>
            <MudTd DataLabel="@(Book.Label[nameof(Book.Site)])" Class="align-middle text-nowrap">@(context.Site)</MudTd>
            <MudTd DataLabel="@(Book.Label[nameof(Book.Status)])" Class="align-middle text-nowrap">
                <MudChip T="string" Label="true" Size="Size.Small" Variant="Variant.Outlined" Style="@($"width: 6em;background:{context.StatusBgColor}")">@(context.Status)</MudChip>
            </MudTd>
            <MudTd DataLabel="@(Book.Label[nameof(Book.NumberOfSheets)])" Class="align-middle text-nowrap">
                @if (context.IsDirectContent) {
                    <MudText Typo="Typo.inherit">1/1</MudText>
                } else {
                    <MudTooltip Duration="1000" Arrow="true">
                        <ChildContent>
                            <MudStack Row Spacing="0">
                                <MudText Typo="Typo.inherit" Color="@(
                                            (context.NumberOfPublished ?? 0) > context.NumberOfRelatedSheets || context.NumberOfRelatedSheets > (context.NumberOfSheets ?? 0) ? Color.Error :
                                            (context.NumberOfPublished ?? 0) < context.NumberOfRelatedSheets || context.NumberOfRelatedSheets < (context.NumberOfSheets ?? 0) ? Color.Warning : Color.Inherit
                                        )">
                                    @(context.NumberOfRelatedSheets)
                                </MudText>
                                <MudText Typo="Typo.inherit">
                                    /@(context.NumberOfSheets ?? 0)
                                </MudText>
                            </MudStack>
                        </ChildContent>
                        <TooltipContent>
                            <MudStack Spacing="0" Class="align-start">
                                <MudText Typo="Typo.inherit">発行数量: @(context.NumberOfPublished ?? 0)</MudText>
                                <MudText Typo="Typo.inherit">取得数量: @(context.NumberOfRelatedSheets)</MudText>
                                <MudText Typo="Typo.inherit">書誌数量: @(context.NumberOfSheets ?? 0)</MudText>
                                <MudText Typo="Typo.inherit">発行日時: @(context.PublishedAt)</MudText>
                                <MudText Typo="Typo.inherit">更新日時: @(context.LastUpdate)</MudText>
                            </MudStack>
                        </TooltipContent>
                    </MudTooltip>
                }
            </MudTd>
            <MudTd DataLabel="@(Book.Label[nameof(Book.Remarks)])">@context.Remarks</MudTd>
        </RowTemplate>
        <PagerContent>
            @if (AllowPaging) {
                <MudTablePager PageSizeOptions="_pageSizeOptions" InfoFormat="{first_item}-{last_item} / {all_items}" RowsPerPageString="行/頁:" />
            }
        </PagerContent>
    </MudTable>
    <MudScrollToTop TopOffset="1000">
        <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
    </MudScrollToTop>
} else {
    <MudText>No items found.</MudText>
}

@code {
    /// <inheritdoc/>
    protected override int _initialPageSizeIndex => 1;

    /// <summary>表示ページ</summary>
    protected int CurrentPage { get; set; } = 0;

    /// <summary>行がクリックされた</summary>
    protected async Task OnRowClick (TableRowClickEventArgs<Book> context) {
        if (context.Item is Book book) {
            selectedItem = book;
            if (CurrentBookId != book.Id) {
                await SetCurrentBookId.InvokeAsync (book.Id);
            }
        }
    }

    /// <summary>遅延初期化</summary>
    protected override async Task OnAfterRenderAsync (bool firstRender) {
        await base.OnAfterRenderAsync (firstRender);
        if (firstRender && items?.Count > 0) {
            if (CurrentBookId <= 0) {
                // 新規セッション
                selectedItem = items [0];
                await SetCurrentBookId.InvokeAsync (items [0].Id);
            } else {
                // 別ページから遷移 (既存セッション)
                selectedItem = items.FirstOrDefault (x => x.Id == CurrentBookId) ?? selectedItem;
            }
            if (_table is not null && string.IsNullOrEmpty (FilterText)) {
                // 絞り込みがなければ、選択されている書籍があるページへ
                var currentIndex = items.IndexOf (selectedItem);
                var currentPage = currentIndex / _table.RowsPerPage;
                if (currentPage != CurrentPage) {
                    CurrentPage = currentPage;
                    StateHasChanged ();
                }
            }
        }
    }

}
