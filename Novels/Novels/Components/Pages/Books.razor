@inherits ItemListBase<Book>

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime

@if (DataSet.IsUnavailable) {
    <MudAlert Severity="Severity.Error" Elevation="3">Unable to connect to any of the specified database management hosts.</MudAlert>
} else if (items is null) {
    <MudProgressCircular Indeterminate="true" />
} else {
    if (items.Count > 0) {
        <MudDataGrid T="Book" Items="items" ReadOnly="false" Dense Hover Elevation="0" Breakpoint="Breakpoint.Xs" @ref="_dataGrid"
            SortMode="SortMode.None" ColumnResizeMode="ResizeMode.Column" FixedHeader Virtualize
            QuickFilter="FilterFunc" RowClick="OnRowClickAsync"
            Height="calc(100vh - var(--mud-appbar-height) * 2 - 2em)"
            Groupable GroupExpanded GroupClass="d-none"
        >
            <Columns>
                <TemplateColumn HeaderClass="px-1" CellClass="py-1 pl-0 pr-1" HeaderStyle="width:3.8em;" CellStyle="text-align:right;">
                    <HeaderTemplate>
                        <MudTooltip Text="@($"着目中の{Book.TableLabel}へ")" Placement="Placement.Right" Arrow Duration="1000">
                            <MudIconButton Disabled="_busy" OnClick="ScrollToCurrent" Icon="@Icons.Material.Filled.DoubleArrow" Size="Size.Small" />
                        </MudTooltip>
                        @(Book.Label [nameof (Book.Id)])
                    </HeaderTemplate>
                    <CellTemplate>
                        <a id="@($"{typeof (Book).Name}-{context.Item.Id}")" />
                        <MudStack Row Spacing="0" Class="align-center">
                            @if (context.Item.Id == CurrentBookId) {
                                <MudIcon Icon="@Icons.Material.Filled.DoubleArrow" />
                            } else {
                                <MudIconButton OnClick="@(async () => { await ChangeCurrentBookAsync (context.Item);  })" Icon="" />
                            }
                            <MudSpacer />
                            @(context.Item.Id)
                            <MudIconButton Disabled="_busy" OnClick="@(async () => await PublishBook (context.Item))" Style="margin-left: 2px;" Icon="@(context.Item.IsEmpty ? Icons.Material.Filled.Download : context.Item.IsUpdatable && !context.Item.IsErrorForNumberOfSheets ? Icons.Material.Filled.Refresh : context.Item.Released && !context.Item.IsPublishable ? Icons.Material.Filled.Sync : Icons.Material.Filled.Publish)" Size="Size.Small" />
                            <MudIconButton Disabled="_busy" OnClick="@(async () => await OpenBook (context.Item))" Style="margin-right: -6px;" Icon="@Icons.Material.Filled.ViewHeadline" Size="Size.Small" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn HeaderClass="px-0" CellClass="py-1 pl-0 pr-1" HeaderStyle="width:2em;" CellStyle="text-align: center;" Title="@(Book.Label [nameof (Book.Status)])">
                    <CellTemplate>
                        <MudChip T="string" Label="true" Size="Size.Small" Variant="Variant.Outlined" Color="@(context.Item.StatusBgColor)" Style="width: 6em">@(context.Item.Status.ToJString ())</MudChip>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn HeaderClass="px-0" CellClass="py-1 pl-0 pr-1 overflow-hidden text-nowrap" CellStyle="max-width: 18em; text-overflow: ellipsis;">
                    <HeaderTemplate>
                        <MudStack Row Spacing="0" Class="align-center">
                            <MudText Typo="Typo.inherit">@(Book.Label [nameof (Book.Title)])</MudText>
                        </MudStack>
                    </HeaderTemplate>
                    <CellTemplate>
                        <MudStack Row Spacing="0" Class="align-center">
                            <MudTooltip Text="@(context.Item.Title)" Arrow Duration="1000" Delay="1000">
                                @(context.Item.Title)
                            </MudTooltip>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn HeaderClass="px-0" CellClass="py-1 pl-0 pr-1 overflow-hidden text-nowrap" CellStyle="max-width: 5em; text-overflow: ellipsis;" Title="@(Book.Label [nameof (Book.Author)])">
                    <CellTemplate>
                        @{ var author = context.Item.Author.Replace (' ', '\u2423'); }
                        <MudTooltip Arrow Duration="1000">
                            <ChildContent>
                                <MudLink OnClick="@(async () => await ChangeFilter (author, context.Item))" Color="Color.Default" Typo="Typo.inherit" Underline="Underline.None">@(context.Item.Author)</MudLink>
                            </ChildContent>
                            <TooltipContent>
                                <MudStack Spacing="0" Class="align-start">
                                    <MudText Typo="Typo.inherit">「@(author)」で絞り込み</MudText>
                                    @foreach (var book in items) {
                                        if (book.Author == context.Item.Author) {
                                            <MudText Typo="Typo.inherit">『@(book.Title)』</MudText>
                                        }
                                    }
                                </MudStack>
                            </TooltipContent>
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn HeaderClass="px-0" CellClass="py-1 pl-0 pr-1 overflow-hidden text-nowrap" CellStyle="max-width: 8em; text-overflow: ellipsis;" Title="@(Book.Label [nameof (Book.SeriesTitle)])">
                    <CellTemplate>
                    @{ var series = context.Item.SeriesTitle.Replace (' ', '\u2423'); }
                    <MudTooltip Arrow Duration="1000">
                        <ChildContent>
                            <MudLink OnClick="@(async () => await ChangeFilter (series, context.Item))" Color="Color.Default" Typo="Typo.inherit" Underline="Underline.None">@(context.Item.SeriesTitle)</MudLink>
                        </ChildContent>
                        <TooltipContent>
                            <MudStack Spacing="0" Class="align-start">
                                <MudText Typo="Typo.inherit">「@(series)」で絞り込み</MudText>
                                @foreach (var book in items) {
                                    if (book.SeriesTitle == context.Item.SeriesTitle) {
                                        <MudText Typo="Typo.inherit">『@(book.Title)』</MudText>
                                    }
                                }
                            </MudStack>
                        </TooltipContent>
                    </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn HeaderClass="px-0" CellClass="py-1 pl-0 pr-1 overflow-hidden text-nowrap" HeaderStyle="width:2em;" CellStyle="text-align: center; max-width: 6em; text-overflow: ellipsis;" Title="@(Book.Label [nameof (Book.Site)])">
                    <CellTemplate>
                    <MudTooltip Text="@($"{Book.Label[nameof(Book.Site)]}を開く")" Arrow Duration="1000">
                        <MudChip OnClick="@(async () => { await JSRuntime.OpenUrl (context.Item.Url); await ChangeCurrentBookAsync (context.Item); })" Target="_blank" T="string" Label="true" Size="Size.Small" Variant="Variant.Outlined">@(context.Item.Site)</MudChip>
                    </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn HeaderClass="pr-0" CellClass="py-1 pr-4" HeaderStyle="width:2em;" CellStyle="text-align:center;" Title="@(Book.Label [nameof (Book.NumberOfSheets)])">
                    <CellTemplate>
                        <MudTooltip Arrow Duration="1000">
                            <ChildContent>
                                <MudStack Row Spacing="0">
                                    <MudText Typo="Typo.inherit" Color="@(context.Item.IsErrorForNumberOfSheets ? Color.Error : context.Item.IsUpdatable ? Color.Warning : Color.Inherit)">
                                        @(context.Item.NumberOfRelatedSheets)
                                    </MudText>
                                    <MudText Typo="Typo.inherit">
                                        /@(context.Item.NumberOfSheets)
                                    </MudText>
                                </MudStack>
                            </ChildContent>
                            <TooltipContent>
                                <MudStack Spacing="0" Class="align-start">
                                    <MudText Typo="Typo.inherit">発行数量: @(context.Item.NumberOfPublished ?? 0)</MudText>
                                    <MudText Typo="Typo.inherit">取得数量: @(context.Item.NumberOfRelatedSheets)</MudText>
                                    <MudText Typo="Typo.inherit">書誌数量: @(context.Item.NumberOfSheets)</MudText>
                                    <MudText Typo="Typo.inherit">発行日時: @(context.Item.PublishedAt)</MudText>
                                    <MudText Typo="Typo.inherit">更新日時: @(context.Item.LastUpdate)</MudText>
                                </MudStack>
                            </TooltipContent>
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn HeaderClass="pr-0" CellClass="py-1 pl-0 pr-4 overflow-hidden text-nowrap" HeaderStyle="width:2em;" CellStyle="max-width: 2em; text-overflow: ellipsis;" Title="@(Book.Label [nameof (Book.Remarks)])">
                    <CellTemplate>
                        <MudTooltip Text="@(context.Item.Remarks)" Placement="Placement.Left" Arrow Duration="1000" Delay="1000">
                            @context.Item.Remarks
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
        <MudToolBar Dense Class="mb-5">
            @*hidden spacer*@
        </MudToolBar>
    } else {
        <MudText>No items found.</MudText>
    }
    <MudAppBar Class="backdrop-blur pb-2" Color="Color.Transparent" Dense Bottom="true" Fixed="true">
        <MudTooltip Text="設定" Duration="1000">
            <MudFab Disabled="_busy" OnClick="Settings" StartIcon="@Icons.Material.Outlined.Settings" Size="Size.Small" Class="mr-2" />
        </MudTooltip>
        <MudSpacer />
        <MudTooltip Text="上端へ" Arrow Duration="1000">
            <MudFab Disabled="_busy" OnClick="ScrollToTopAsync" Size="Size.Small" StartIcon="@Icons.Material.Filled.VerticalAlignTop" Class="mr-2" />
        </MudTooltip>
        <MudTooltip Text="下端へ" Arrow Duration="1000">
            <MudFab Disabled="_busy" OnClick="ScrollToBottomAsync" Size="Size.Small" StartIcon="@Icons.Material.Filled.VerticalAlignBottom" Class="mr-2" />
        </MudTooltip>
        <MudTooltip Text="発行済み/未発行を絞り込み" Duration="1000">
            <MudFab Disabled="_busy" OnClick="@(async () => await ChangeFilter ("_is_released_", "_not_released_"))" StartIcon="@Icons.Material.Outlined.PublishedWithChanges" Size="Size.Small" Class="mr-2" />
        </MudTooltip>
        <MudTooltip Text="既読/未読を絞り込み" Duration="1000">
            <MudFab Disabled="_busy" OnClick="@(async () => await ChangeFilter ("_is_readed_", "_not_readed_"))" StartIcon="@Icons.Material.Outlined.Visibility" Size="Size.Small" Class="mr-2" />
        </MudTooltip>
        <MudTooltip Text="お気に入りを絞り込み" Duration="1000">
            <MudFab Disabled="_busy" OnClick="@(async () => await ChangeFilter ("_is_wished_", "_not_wished_"))" StartIcon="@Icons.Material.Outlined.StarRate" Size="Size.Small" Class="mr-2" />
        </MudTooltip>
        <MudTooltip Text="未着手を絞り込み" Duration="1000">
            <MudFab Disabled="_busy" OnClick="@(async () => await ChangeFilter ("=_not_readed_ =%0."))" StartIcon="@Icons.Material.Outlined.FiberNew" Size="Size.Small" Class="mr-2" />
        </MudTooltip>
        <MudSpacer />
        <MudTooltip Arrow="true" Text="@($"{Book.TableLabel}を追加")">
            <MudFab Disabled="_busy" OnClick="AddBook" StartIcon="@Icons.Material.Outlined.Add" Size="Size.Small" />
        </MudTooltip>
    </MudAppBar>
}

@code {
    /// <summary>行がクリックされた</summary>
    protected async Task OnRowClickAsync (DataGridRowClickEventArgs<Book> context) {
        if (context.Item is Book book) {
            await ChangeCurrentBookAsync (book);
        }
    }

    /// <summary>フィルター切り替え (トライステート)</summary>
    protected async Task ChangeFilter (string on, string off) {
        var newText = FilterText == on ? off : FilterText == off ? "" : on;
        await SetFilter (newText);
    }
    /// <summary>フィルター切り替え</summary>
    protected async Task ChangeFilter (string filter) {
        var newText = FilterText == filter ? "" : filter;
        await SetFilter (newText);
    }

    /// <summary>フィルター切り替え</summary>
    protected async Task ChangeFilter (string filter, Book book) {
        await ChangeCurrentBookAsync (book);
        await ChangeFilter (filter);
    }

    /// <summary>フィルター設定</summary>
    protected async Task SetFilter (string filter) {
        SetBusy ();
        SetFilterText (filter);
        await TaskEx.DelayUntil (() => FilterText == filter);
        if (filter == string.Empty) {
            await ScrollToCurrentAsync ();
        }
        SetIdle ();
    }

    /// <summary>Urlを開く</summary>
    protected async Task OpenUrl (Book book) {
        SetBusy ();
        await JSRuntime.OpenUrl (book.Url);
        await ChangeCurrentBookAsync (book);
        SetIdle ();
    }

    /// <summary>設定</summary>
    protected async Task Settings () {
        SetBusy ();
        await SetAppMode (AppMode.Settings);
        SetIdle ();
    }

    /// <summary>書籍を発行</summary>
    protected async Task PublishBook (Book book) {
        SetBusy ();
        await ChangeCurrentBookAsync (book);
        await SetAppMode (AppMode.Publish);
        SetIdle ();
    }

    /// <summary>書籍を開く</summary>
    protected async Task OpenBook (Book book) {
        SetBusy ();
        await ChangeCurrentBookAsync (book);
        await SetAppMode (AppMode.Contents);
        SetIdle ();
    }

    /// <summary>書籍を追加する</summary>
    protected async Task AddBook () {
        var url = "";
        try {
            url = await JSRuntime.InvokeAsync<string> ("getClipboardText");
            // urlを修正する機会を与えるダイアログを表示
            var dialogResult = await (await DialogService.OpenAddItemDialog<Book> (
                message: $"取得先URLを確認して{Book.TableLabel}の追加を完了してください。",
                label: "URL",
                value: url
            )).Result;
            if (dialogResult is not null && !dialogResult.Canceled && dialogResult.Data is string newUrl && !string.IsNullOrEmpty (newUrl)) {
                newUrl = newUrl.Trim ();
                // 既存のURLと比較する
                var existingBook = items?.FirstOrDefault (x => x.Url1 == newUrl || x.Url2 == newUrl);
                if (existingBook is not null) {
                    Snackbar.Add ($"既存の{Book.TableLabel}: 『{existingBook.Title}』", Severity.Warning);
                    await ChangeCurrentBookAsync (existingBook);
                    await ScrollToCurrentAsync ();
                    return;
                }
                // オーバーレイ
                SetBusy ();
                // 入力されたurlからあたらしいBookに情報を取得、DBへ追加・選択する
                var result = await DataSet.UpdateBookFromSiteAsync (HttpClient, newUrl, UserIdentifier);
                foreach (var issue in result.Value.issues) {
                    Snackbar.Add (issue, Severity.Error);
                }
                if (result.IsSuccess) {
                    var newBook = result.Value.book;
                    lastCreatedId = newBook.Id;
                    await ChangeCurrentBookAsync (newBook);
                    // Publishページへ移動する
                    await PublishBook (newBook);
                } else {
                    Snackbar.Add ($"追加に失敗: {(items is null ? "null, " : "")}{lastCreatedId}\n{newItem}", Severity.Error);
                }
            }
        }
        catch (Exception ex) {
            Snackbar.Add ($"Exception: {ex.Message}", Severity.Error);
        }
        finally {
            SetIdle ();
        }
    }
}
