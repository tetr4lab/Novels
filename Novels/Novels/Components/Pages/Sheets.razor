@inherits ItemListBase<Sheet>

@page "/sheets/{BookId:long?}/{SheetIndex:int?}"

@inject NavigationManager NavigationManager

<PageTitle>Sheets</PageTitle>

@if (DataSet.IsUnavailable) {
    <MudAlert Severity="Severity.Error" Elevation="3">Unable to connect to any of the specified database management hosts.</MudAlert>
} else if (DataSet.IsReady && Book is null) {
    <MudText>No book selected or found.</MudText>
    <MudButton Class="ma-3" OnClick="@(() => NavigationManager.NavigateTo ($"{NavigationManager.BaseUri}"))" StartIcon="@Icons.Material.Filled.LibraryBooks" Variant="Variant.Filled">go home</MudButton>
} else if (!DataSet.IsReady || items is null || Book is null) {
    <MudProgressCircular Indeterminate="true" />
} else {
    @if (!string.IsNullOrEmpty (Book.Explanation)) {
        <MudPaper Class="ma-4 pa-2" Elevation="2">
            <MudText Typo="Typo.caption">@((MarkupString) Book.Explanation)</MudText>
        </MudPaper>
    }
    if (items.Count > 0) {
        <style>
            th.mud-table-cell, td.mud-table-cell {
                padding-inline: 0.1em !important;
            }
        </style>
        <MudTable Items="items" Dense Breakpoint="Breakpoint.Xs" @ref="_table"
        Filter="new Func<Sheet, bool> (FilterFunc)"
        SortLabel="⇅"
        AllowUnsorted="true"
        @bind-SelectedItem="selectedItem"
        @bind-CurrentPage="CurrentPage"
        FooterClass="mud-background-gray"
        Hover="true"
        OnRowClick="EventCallback.Factory.Create<TableRowClickEventArgs<Sheet>> (this, OnRowClickAsync)"
        Striped="true"
        ReadOnly="false">
            <HeaderContent>
                <MudTh Class="align-middle">
                    <MudTooltip Text="@($"{Book.Label [nameof (Data.Book.Bookmark)]}へ着目")" Arrow Duration="1000">
                        <MudIconButton OnClick="ChangeMarkedPageAsync" Icon="@Icons.Material.Filled.BookmarkAdded" Size="Size.Small" />
                    </MudTooltip>
                </MudTh>
                <MudTh>@(Sheet.Label [nameof (Sheet.NovelNumber)])</MudTh>
                <MudTh>@(Sheet.Label [nameof (Sheet.ChapterTitle)])</MudTh>
                @if (Book.HasChapterSubTitle) {
                    <MudTh>@(Sheet.Label [nameof (Sheet.ChapterSubTitle)])</MudTh>
                }
                <MudTh>
                    <MudStack Row Spacing="0" Class="align-center">
                        <MudIcon Icon="" />
                        <MudText Typo="Typo.inherit">@(Sheet.Label [nameof (Sheet.SheetTitle)])</MudText>
                    </MudStack>
                </MudTh>
                <MudTh>@(Sheet.Label [nameof (Sheet.SheetUpdatedAt)])</MudTh>
                <MudTh>@(Sheet.Label [nameof (Sheet.Remarks)])</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="@(Book.Label[nameof(Data.Book.Bookmark)])" Class="align-middle">
                    @{
                        var marked = Book.Bookmark == context.Id;
                    }
                    <MudIconButton OnClick="@(async () => await ChangeBookmarkAsync (context.Id))" Icon="@(marked ? Icons.Material.Filled.Bookmark : Icons.Material.Filled.BookmarkBorder)" Size="Size.Small" />
                </MudTd>
                <MudTd DataLabel="@(Sheet.Label[nameof(Sheet.NovelNumber)])" Class="align-right text-nowrap" Style="padding-inline-end: 0.8em !important;">
                    <MudStack Row Spacing="0" Class="align-center">
                        @if (items is not null && items.IndexOf (context) + 1 == CurrentSheetIndex) {
                            <MudTooltip Text="@($"着目中の{Sheet.TableLabel}")" Arrow Duration="1000">
                                <MudIcon Icon="@Icons.Material.Filled.DoubleArrow" />
                            </MudTooltip>
                        }
                        <MudSpacer />
                        @(context.NovelNumber)
                    </MudStack>
                </MudTd>
                <MudTd DataLabel="@(Sheet.Label[nameof(Sheet.ChapterTitle)])">@(context.ChapterTitle)</MudTd>
                @if (Book.HasChapterSubTitle) {
                    <MudTd DataLabel="@(Sheet.Label[nameof(Sheet.ChapterSubTitle)])">@(context.ChapterSubTitle)</MudTd>
                }
                <MudTd DataLabel="@(Sheet.Label[nameof(Sheet.SheetTitle)])">
                    <MudStack Row Spacing="0" Class="align-center">
                        <MudIconButton OnClick="@(() => ReadSheet (context))" Disabled="@(BookId != CurrentBookId)" Icon="@Icons.Material.Filled.MenuBook" Size="Size.Small" />
                        <MudText Typo="Typo.inherit">@(context.SheetTitle)</MudText>
                    </MudStack>
                </MudTd>
                <MudTd DataLabel="@(Sheet.Label[nameof(Sheet.SheetUpdatedAt)])">
                    @{
                        var dateTime = SheetIndex > 0 ? Book.SheetUpdateDates [SheetIndex.Value] : DateTime.MinValue;
                    }
                    <MudText Typo="Typo.inherit" Color="@(dateTime > context.SheetUpdatedAt ? Color.Warning : Color.Inherit)">
                        <MudTooltip Text="@(dateTime == DateTime.MinValue ? "" : $"最終更新: {dateTime.ToString ("yyyy/MM/dd HH:mm")}")" Duration="1000">
                            @(context.SheetUpdatedAt?.ToString ("yyyy/MM/dd HH:mm"))
                        </MudTooltip>
                    </MudText>
                </MudTd>
                <MudTd DataLabel="@(Sheet.Label[nameof(Sheet.Remarks)])">@context.Remarks</MudTd>
            </RowTemplate>
            <PagerContent>
                @if (AllowPaging) {
                    <MudTablePager PageSizeOptions="_pageSizeOptions" InfoFormat="{first_item}-{last_item} / {all_items}" RowsPerPageString="行/頁:" />
                }
            </PagerContent>
        </MudTable>
        <MudText Typo="Typo.caption">@(Book.Label [nameof (Book.LastUpdate)]): @(Book.LastUpdate.ToString ("yyyy/MM/dd HH:mm"))</MudText>
    } else if (Book.IsDirectContent) {
        <MudText>Direct content found.</MudText>
    } else {
        <MudText>No items found.</MudText>
    }
}

@code {
    /// <summary>指定された書籍</summary>
    [Parameter] public long? BookId { get; set; } = null;
    /// <summary>ページ</summary>
    [Parameter] public int? SheetIndex { get; set; } = null;

    /// <inheritdoc/>
    protected override int _initialPageSizeIndex => 1;

    /// <summary>表示ページ</summary>
    protected int CurrentPage { get; set; } = 0;

    /// <summary>着目中の書籍</summary>
    protected Book? Book { get; set; } = null;

    /// <summary>行がクリックされた</summary>
    protected async Task OnRowClickAsync (TableRowClickEventArgs<Sheet> context) {
        if (context.Item is Sheet sheet) {
            await ChangeCurrentSheetAsync (sheet);
        }
    }

    /// <summary>着目シートの変更</summary>
    protected async Task ChangeCurrentSheetAsync (Sheet sheet) {
        if (items is not null) {
            selectedItem = sheet;
            var index = items.IndexOf (sheet) + 1;
            if (CurrentSheetIndex != index) {
                await SetCurrentBookId.InvokeAsync ((CurrentBookId, index));
                NavigationManager.NavigateTo ($"{NavigationManager.BaseUri}sheets/{CurrentBookId}/{index}");
            }
        }
    }

    /// <summary>シートを開く</summary>
    protected void ReadSheet (Sheet context) {
        if (Book is not null && items is not null) {
            var index = items.IndexOf (context) + 1;
            NavigationManager.NavigateTo ($"{NavigationManager.BaseUri}sheet/{CurrentBookId}/{index}");
        }
    }

    /// <summary>栞の切り替え</summary>
    /// <remarks>ItemListBase&lt;Sheet&gt;下でBookを操作する</remarks>
    protected async Task ChangeBookmarkAsync (long id) {
        if (Book is not null) {
            var delete = Book.Bookmark == id;
            var operation = delete ? "削除" : "変更";
            Book.Bookmark = delete ? null : id;
            Book.Modifier = UserIdentifier;
            var result = await DataSet.UpdateAsync (Book);
            if (result.IsSuccess) {
                Snackbar.Add ($"栞を{operation}しました。", Severity.Normal);
            } else {
                Snackbar.Add ($"栞を{operation}できませんでした。", Severity.Error);
            }
        }
    }

    /// <summary>栞のページへ</summary>
    protected async Task ChangeMarkedPageAsync () {
        if (_table is not null && items is not null && Book?.Bookmark is not null && string.IsNullOrEmpty (FilterText)) {
            var markedItem = items.Find (s => s.Id == Book.Bookmark);
            if (markedItem is not null) {
                var markedIndex = items.IndexOf (markedItem);
                var currentPage = markedIndex / _table.RowsPerPage;
                if (currentPage != CurrentPage) {
                    CurrentPage = currentPage;
                    StateHasChanged ();
                }
                await ChangeCurrentSheetAsync (markedItem);
            }
        }
    }

    /// <summary>最初に着目書籍を切り替えてDataSetの再初期化を促す</summary>
    protected override async Task OnInitializedAsync() {
        // Uriパラメータを優先して着目書籍を特定する
        var currentBookId = BookId ?? CurrentBookId;
        if (currentBookId != CurrentBookId || SheetIndex is not null && SheetIndex != CurrentSheetIndex) {
            // パラメータによって着目書籍が変更されたら、レイアウトとナビに渡す
            await SetCurrentBookId.InvokeAsync ((currentBookId, SheetIndex ?? CurrentSheetIndex));
        }
        var reload = DataSet.SetCurrentBookIdAsync (currentBookId);
        await base.OnInitializedAsync ();
        // リロード完了待機
        await reload;
        // 着目書籍オブジェクトを取得
        Book = DataSet.Books.Find (s => s.Id == currentBookId);
        await SetSectionTitle.InvokeAsync (Book is null ? "Contents" : $"<span style=\"font-size:80%;\">『{Book?.Title ?? ""}』 {Book?.Author ?? ""}</span>");
    }

    /// <summary>遅延初期化</summary>
    protected override async Task OnAfterRenderAsync (bool firstRender) {
        await base.OnAfterRenderAsync (firstRender);
        if (_inited && !_inited2 && items?.Count > 0) {
            _inited2 = true;
            if (CurrentSheetIndex >= 1 && CurrentSheetIndex <= items.Count) {
                selectedItem = items [CurrentSheetIndex - 1];
            }
            if (_table is not null && string.IsNullOrEmpty (FilterText)) {
                // 絞り込みがなければ、選択されているシートがあるページへ
                var currentIndex = items.IndexOf (selectedItem);
                var currentPage = currentIndex / _table.RowsPerPage;
                if (currentPage != CurrentPage) {
                    CurrentPage = currentPage;
                    StateHasChanged ();
                }
            }
        }
    }
    protected bool _inited2 = false;
}