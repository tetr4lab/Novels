@inherits ItemListBase<Sheet>

@page "/sheet/{SheetId:long?}"

<PageTitle>Sheet</PageTitle>

@if (DataSet.IsUnavailable) {
    <MudAlert Severity="Severity.Error" Elevation="3">Unable to connect to any of the specified database management hosts.</MudAlert>
} else if (!DataSet.IsReady || items is null) {
    <MudProgressCircular Indeterminate="true" />
} else if (items.Count > 0) {
    var book = DataSet.Books.Find (s => s.Id == CurrentBookId);
    if (book is not null) {
        SheetId ??= items [0].Id; // Default to the first page if not specified
        var item = items.Find (i => i.Id == SheetId.Value);
        if (item is not null) {
            var page = items.IndexOf (item) + 1;
            <MudText>『@(book.Title)』 @(book.Author) #@(item.NovelNumber) @(page)/@(book.CountOfSheets)</MudText>
            <MudText>『@(book.DetectedTitle)』</MudText>
            <MudPaper>
                @(item.Document.Body.InnerHtml)
            </MudPaper>
        } else {
            <MudText>No page found.</MudText>
        }
    } else {
        <MudText>No books found.</MudText>
    }
} else {
    <MudText>No items found.</MudText>
}
selected: @CurrentBookId

@code {
    /// <summary>ページ</summary>
    [Parameter] public long? SheetId { get; set; } = null;

    /// <summary>着目中の書籍</summary>
    [CascadingParameter (Name = "CurrentBookId")] protected long CurrentBookId { get; set; } = 0;

    /// <summary>最初に着目書籍を切り替えてDataSetの再初期化を促す</summary>
    protected override async Task OnInitializedAsync() {
        DataSet.CurrentBookId = CurrentBookId;
        await base.OnInitializedAsync ();
    }
}