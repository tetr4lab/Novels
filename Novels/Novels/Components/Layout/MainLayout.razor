@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.ComponentModel;

@inherits LayoutComponentBase

@implements IDisposable
@inject ProtectedLocalStorage Storage
@inject IAppLockState AppLockState
@inject NovelsAppModeService AppModeService

<PageTitle>Novels</PageTitle>

<div class="page">
    <AuthorizeView Policy="Users">
        <Authorized>
            <nav>
                <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                    <MudFab Class="fixed ma-2 z-100" Style="right: 0px;" Color="Color.Transparent" Ripple="false" StartIcon="@Icons.Material.Filled.Menu" Size="Size.Small" OnClick="@(() => _drawerOpen = true)" />
                    <MudDrawer Class="fixed" @bind-Open="@_drawerOpen" Anchor="Anchor.Top" Elevation="1" Variant="@DrawerVariant.Temporary">
                        <MudNavMenu Dense Color="Color.Dark" Class="px-4 my-2">
                            <CascadingValue Value="@_isDarkMode" Name="IsDarkMode">
                            <CascadingValue Value="@(EventCallback.Factory.Create (this, ChangeModeAsync))" Name="ChangeModeAsync">
                                <NavBar />
                            </CascadingValue>
                            </CascadingValue>
                        </MudNavMenu>
                    </MudDrawer>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Xs">
                    <MudAppBar Color="Color.Transparent" Dense Fixed="true" Class="backdrop-blur">
                        <MudGrid Class="align-center flex-nowrap" Spacing="0">
                            <CascadingValue Value="@_isDarkMode" Name="IsDarkMode">
                            <CascadingValue Value="@(EventCallback.Factory.Create (this, ChangeModeAsync))" Name="ChangeModeAsync">
                                <NavBar />
                            </CascadingValue>
                            </CascadingValue>
                        </MudGrid>
                    </MudAppBar>
                </MudHidden>
            </nav>
            <main>
                <MudHidden Breakpoint="Breakpoint.Xs">
                    <MudAppBar Color="Color.Transparent" Style="z-index:0;" Elevation="0" Dense Fixed="false">
                        @*hidden spacer*@
                    </MudAppBar>
                </MudHidden>
                <MudStack Row Class="px-4" Justify="Justify.SpaceBetween">
                    <MudText Typo="Typo.h5">@((MarkupString) AppModeService.SectionTitle)</MudText>
                    <MudText Typo="Typo.h5"><SessionCounter /></MudText>
                </MudStack>
                <article class="content px-4">
                    @Body
                </article>
            </main>
        </Authorized>
        <NotAuthorized>
            <main>
                <article class="content px-4">
                    @Body
                </article>
            </main>
        </NotAuthorized>
    </AuthorizeView>
</div>
<AppLockOverlay IsOverlayed="AppLockState.IsLocked" OverlayValue="AppLockState.CurrentProgressValue" OverlayMin="0" OverlayMax="AppLockState.TotalProgressValue" OverlayLabel="@AppLockState.Reason" />
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    /// <summary>テーマ ストレージキー</summary>
    protected const string DarkModeStorageKey = "IsDarkTheme";

    /// <summary>テーマプロバイダへの参照</summary>
    protected MudThemeProvider _mudThemeProvider = default!;

    /// <summary>ダークモード</summary>
    protected bool _isDarkMode;

    /// <summary>テーマ切替ボタンが押された</summary>
    protected async Task ChangeModeAsync () {
        _isDarkMode = !_isDarkMode;
        await Storage.SetValueAsync (DarkModeStorageKey, _isDarkMode);
    }

    /// <summary>遅延初期化</summary>
    protected override async Task OnAfterRenderAsync (bool firstRender) {
        if (firstRender) {
            // テーマ
            try {
                var darkMode = await Storage.GetValueAsync<bool> (DarkModeStorageKey);
                _isDarkMode = darkMode.Success ? darkMode.Value : await _mudThemeProvider.GetSystemDarkModeAsync ();
            }
            catch (System.Security.Cryptography.CryptographicException ex) {
                System.Diagnostics.Debug.WriteLine ($"CryptographicException: {ex.Message}\n{ex.StackTrace}");
            }
            await Storage.SetValueAsync (DarkModeStorageKey, _isDarkMode);
            StateHasChanged ();
        }
    }

    /// <summary>ドロワーの状態</summary>
    protected bool _drawerOpen = false;

    /// <summary>アプリモードが変化した</summary>
    protected async void OnAppModeChanged (object? sender, PropertyChangedEventArgs e) {
        if (e.PropertyName == "FilterText") { // 検索文字列
            _drawerOpen = false;
        }
        if (e.PropertyName == "SectionTitle") { // セクションタイトル
            await InvokeAsync (StateHasChanged);
        }
    }

    /// <summary>アプリロックが変化した</summary>
    protected async void OnAppLockChanged (object? sender, PropertyChangedEventArgs e) {
        await InvokeAsync (StateHasChanged);
    }

    /// <summary>初期化 購読開始</summary>
    protected override void OnInitialized () {
        base.OnInitialized ();
        AppLockState.PropertyChanged += OnAppLockChanged;
        AppModeService.PropertyChanged += OnAppModeChanged;
    }

    /// <summary>購読終了</summary>
    public void Dispose () {
        AppLockState.PropertyChanged -= OnAppLockChanged;
        AppModeService.PropertyChanged -= OnAppModeChanged;
    }
}
