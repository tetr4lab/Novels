<MudItem>
    @if (!IsHomePage) {
        <MudText Class="pr-8" Typo="Typo.h4">Novels</MudText>
    } else {
        <MudText Class="pb-2" Typo="Typo.h4">Contents</MudText>
    }
</MudItem>
@if (!IsHomePage) {
    <MudItem>
        <MudButton Disabled="@(AppMode == AppMode.Books)" OnClick="@(async () => await SetAppMode.InvokeAsync (AppMode.Books))" StartIcon="@Icons.Material.Filled.LibraryBooks" Class="mx-2" IconClass="mr-1"><MudText Typo="Typo.h6">Books</MudText></MudButton>
    </MudItem>
}
<MudItem>
    <MudButton Disabled="@(AppMode == AppMode.Publish)" OnClick="@(async () => await SetAppMode.InvokeAsync (AppMode.Publish))" StartIcon="@Icons.Material.Filled.Sync" Class="mx-2" IconClass="mr-1"><MudText Typo="Typo.h6">Publish</MudText></MudButton>
</MudItem>
<MudItem>
    <MudButton Disabled="@(AppMode == AppMode.Contents)" OnClick="@(async () => await SetAppMode.InvokeAsync (AppMode.Contents))" StartIcon="@Icons.Material.Filled.ViewHeadline" Class="mx-2" IconClass="mr-1"><MudText Typo="Typo.h6">Contents</MudText></MudButton>
</MudItem>
<MudItem>
    <MudButton Disabled="@(AppMode == AppMode.Read)" OnClick="@(async () => await SetAppMode.InvokeAsync (AppMode.Read))" StartIcon="@Icons.Material.Filled.MenuBook" Class="mx-2" IconClass="mr-1"><MudText Typo="Typo.h6">Read</MudText></MudButton>
</MudItem>
<MudItem>
    <MudButton Disabled="@(AppMode == AppMode.Settings)" OnClick="@(async () => await SetAppMode.InvokeAsync (AppMode.Settings))" StartIcon="@Icons.Material.Filled.Settings" Class="mx-2" IconClass="mr-1"><MudText Typo="Typo.h6">Settings</MudText></MudButton>
</MudItem>
@if (!IsHomePage) {
    <MudSpacer />
    @if (RevisionInfo.Valid) {
        <MudItem Class="mr-4 align-self-end">
            <MudText Style="font-size:var(--mud-typography-caption-size); color:var(--mud-palette-action-disabled);">
                @($"revision: {RevisionInfo.Branch} - {RevisionInfo.Id}")
            </MudText>
        </MudItem>
    }
    <MudItem>
        <MudStack Row Class="align-center">
            <MudTooltip Arrow Duration="1000">
                <ChildContent>
                    <MudTextField @bind-Value="_filterText" @ref="searchField"
                    OnKeyUp="OnKeyUp"
                    OnBlur="OnClick"
                    OnAdornmentClick="OnClick" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                    OnClearButtonClick="OnClick" Clearable 
                    Label="Search" Margin="Margin.Dense" Variant="Variant.Outlined" Underline="false" />
                </ChildContent>
                <TooltipContent>
                    <MudText Typo="Typo.inherit" Align="Align.Left">
                        <p>検索文字列</p>
                        <p>空白文字で区切られた部分が全て含まれると適合します。</p>
                        <p>'␣'(U+2423)または'&nbsp;'(U+00A0)は区切られない空白文字として使えます。</p>
                        <p>'='が先行する部分は一致すると適合します。</p>
                        <p>'!'が先行する部分は一致すると適合しません。</p>
                        <p>'^'が先行する部分は含まれると適合しません。</p>
                        <p>'|'で区切られた部分はいずれか一つで適合します。</p>
                        <p>'#~.'@(Book.TableLabel)@(Book.Label [nameof (Book.Id)])</p>
                        <p>':~.'@(Book.Label [nameof (Book.Site)])</p>
                        <p>'_is_released_'/'_not_released_'@(Book.Label [nameof (Book.Released)])</p>
                        <p>'_is_readed_'/'_not_readed_'@(Book.Label [nameof (Book.Readed)])</p>
                        <p>'_is_wished_'/'_not_wished_'@(Book.Label [nameof (Book.Wish)])</p>
                        <p>'_<i>status</i>_'@(Book.Label [nameof (Book.Status)])</p>
                    </MudText>
                </TooltipContent>
            </MudTooltip>
            <MudTooltip Text="未着手" Arrow Duration="1000">
                <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.FiberNew" OnClick="@(() => {
                    var newText = $"=_not_readed_ =%0. =_not_direct_";
                    _filterText = _filterText == newText ? "" : newText;
                    OnClick ();
                })" />
            </MudTooltip>
            @if (!OnClickChangeModeButton.Equals (EventCallback.Empty)) {
                <MudTooltip Text="テーマ" Arrow Duration="1000">
                    <MudIconButton Size="Size.Small" Icon="@(IsDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" OnClick="(async () => await OnClickChangeModeButton.InvokeAsync ())" />
                </MudTooltip>
            }
        </MudStack>
    </MudItem>
}

@code {
    /// <summary>サーチボタンが押されたときの処理</summary>
    [Parameter] public EventCallback<string?> OnClickSearchButton { get; set; } = EventCallback<string?>.Empty;
    /// <summary>ダークモード</summary>
    [Parameter] public bool IsDarkMode { get; set; }
    /// <summary>モード切替ボタンが押されたときの処理</summary>
    [Parameter] public EventCallback OnClickChangeModeButton { get; set; } = EventCallback.Empty;
    /// <summary>検索文字列</summary>
    [CascadingParameter (Name = "Filter")] protected string FilterText { get; set; } = string.Empty;
    /// <summary>着目中の書籍</summary>
    [CascadingParameter (Name = "CurrentBookId")] protected long CurrentBookId { get; set; } = 0;
    /// <summary>着目中のシート</summary>
    [CascadingParameter (Name = "CurrentSheetIndex")] protected int CurrentSheetIndex { get; set; } = 0;
    /// <summary>アプリモード</summary>
    [CascadingParameter (Name = "AppMode")] protected AppMode AppMode { get; set; } = AppMode.Boot;
    /// <summary>アプリモード設定</summary>
    [CascadingParameter (Name = "SetAppMode")] protected EventCallback<AppMode> SetAppMode { get; set; }

    /// <summary>検索文字列</summary>
    private string _filterText = string.Empty;

    /// <summary>
    /// ホームページの判定
    /// サーチボタンのアクションが指定されていればナビゲーションバー
    /// 指定されなければホームページのコンテンツ
    /// </summary>
    private bool IsHomePage => OnClickSearchButton.Equals (EventCallback<string?>.Empty);

    /// <summary>検索フィールドへの参照</summary>
    private MudTextField<string> searchField { get; set; } = new MudTextField<string>();

    /// <summary>検索フィールドでキーが押された</summary>
    protected void OnKeyUp (KeyboardEventArgs eventArgs) {
        if (eventArgs.Key == "Enter") {
            OnClick();
        }
    }

    /// <summary>パラメータが更新された</summary>
    protected override void OnParametersSet () {
        base.OnParametersSet ();
        if (_filterText != FilterText) {
            _filterText = FilterText;
        }
    }

    /// <summary>検索ボタン(またはフィールドクリアボタン)が押された</summary>
    public void OnClick () {
        if (FilterText != _filterText) {
            OnClickSearchButton.InvokeAsync(_filterText);
            searchField.BlurAsync();
        }
    }

}
